{
  "hash": "7bd8ae6ef272f045cdada6c68f6544ac",
  "result": {
    "markdown": "---\ntitle: \"Assignment 1\"\n---\n\n\n# Assignment 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nMy first assignment has two parts.\n\n## (a)***Yes, you can use Python with RStudio Team!***\n\nThe reason for producing this solution is to allow two teams who know different languages and use similar workflows to work collaboratively. In the example model in the video, they wanted to focus on the problem that one part of the same workflow contains different languages and the other part contains different languages. For this, they build a model in Python all within RStudio.\n\nRStudio offers three professional tools: Workbench, RStudio Connect, Package Manager. First of all, Workbench provides a workspace for Python scientists to write code in RStudio. RStudio Connect provides the opportunity to share content as the project develops. Allows to deploy a very wide variety of data, data science assets. In Package Manager, you can install packages from here instead of PyPi.\n\nIn the rest of the video, they showed the information explained through a demo, showing that Python can be used with Rstudio and that teams using different languages can work together.\n\n## (b) 3 ***Difference between R and Python***\n\n**1)     Indexing:**\n\n·        In Python indexing starts with 0\n\n```         \nlist_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n```         \n  print(list_numbers[2])\n```\n\n```         \noutput is 3\n```\n\n·        In R indexing starts with 1\n\nlist_numbers \\<- (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nlist_numbers\\[2\\]\n\noutput is 2\n\n**2)     Function Definitions:**\n\n·        In **Python** a function defined by def\n\ndef sum(a,b):\\\n    return a + b\\\n\\\nprint(sum(2,3))\n\n·        In **R** a function defined by function()\n\n```         \nsum <- function(x, y) { \n\n  result <- x - y  \n\n  print(result) \n}\n```\n\n**3)     Syntax and Data Structures:**\n\n·        Creating a Data Frame in **Python**\n\ndata = {'Name': \\['Alice', 'Bob', 'Charlie'\\],\n\n        'Age': \\[25, 30, 35\\]}\n\ndf = pd.DataFrame(data)\n\nprint(df)\n\n·        Creating a Data Frame in **R**\n\ndata \\<- data.frame(Name = c('Alice', 'Bob', 'Charlie'),\n\n                   Age = c(25, 30, 35))\n\nprint(data)\n\n# (c) \n\nlibrary(dslabs)\n\ndata(\"na_example\")\n\nhead(na_example)\n\ntotal \\<- sum(is.na(na_example))\n\ntotal\n\nna_example\\[is.na(na_example)\\] \\<- 0\n\nna_example\n\ndf \\<- na_example\n\ndf\n\n# (d)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}